// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== User Model (Base user model for multi-tenant)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations to other models
  carts     Cart[]
  orders    Order[]
  addresses Address[]

  @@index([email])
}

// ===== Organization Model
model Organization {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  projects    Project[]
  categories  Category[]
  vendors     Vendor[]
  products    Product[]
  carts       Cart[]
  orders      Order[]
  addresses   Address[]
  webhooks    WebhookEvent[]

  @@index([name])
}

// ===== Project Model
model Project {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  description String?
  status      String   @default("planning")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  org Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@unique([orgId, name])
  @@index([orgId])
}

// ===== Category Model
model Category {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  org      Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  products ProductCategory[]

  @@unique([orgId, name])
  @@index([orgId])
}

// ===== Vendor Model
model Vendor {
  id          String   @id @default(cuid())
  orgId       String
  name        String
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  org      Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  products Product[]

  @@unique([orgId, name])
  @@index([orgId])
}

// استكمال نموذج Product
model Product {
  id          String            @id @default(cuid())
  orgId       String
  vendorId    String?
  name        String
  slug        String
  description String?
  status      String            @default("draft")
  price       Decimal           @default(0)
  currency    String            @default("USD")
  stock       Int               @default(0)
  active      Boolean           @default(true)
  images      Json?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  org        Organization      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  vendor     Vendor?           @relation(fields: [vendorId], references: [id], onDelete: SetNull)
  categories ProductCategory[]
  carts      CartItem[]
  orders     OrderItem[]

  @@unique([orgId, slug])
  @@index([orgId])
  @@index([vendorId])
  @@index([active])
}

// Many-to-Many: Product <-> Category
model ProductCategory {
  id         String    @id @default(cuid())
  productId  String
  categoryId String

  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([categoryId])
}

// ===== Cart (سلة التسوق)
model Cart {
  id        String    @id @default(cuid())
  orgId     String
  userId    String
  status    String    @default("active")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  org       Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     CartItem[]

  @@index([orgId])
  @@index([userId])
  @@index([status])
}

// عناصر السلة
model CartItem {
  id        String    @id @default(cuid())
  cartId    String
  productId String
  quantity  Int       @default(1)
  price     Decimal   @default(0)
  createdAt DateTime  @default(now())

  cart      Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([cartId])
  @@index([productId])
}

// ===== Order (الطلب)
model Order {
  id         String      @id @default(cuid())
  orgId      String
  userId     String
  status     String      @default("pending")
  total      Decimal     @default(0)
  currency   String      @default("USD")
  addressId  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  address    Address?     @relation(fields: [addressId], references: [id], onDelete: SetNull)
  items      OrderItem[]

  @@index([orgId])
  @@index([userId])
  @@index([status])
}

// عناصر الطلب
model OrderItem {
  id         String    @id @default(cuid())
  orderId    String
  productId  String
  quantity   Int       @default(1)
  price      Decimal   @default(0)
  createdAt  DateTime  @default(now())

  order      Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product   @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}

// ===== Address (العناوين)
model Address {
  id         String    @id @default(cuid())
  orgId      String
  userId     String
  label      String?
  country    String
  city       String
  street     String
  zip        String?
  phone      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]

  @@index([orgId])
  @@index([userId])
}

// ===== WebhookEvent (أحداث الربط البرمجي)
model WebhookEvent {
  id         String    @id @default(cuid())
  orgId      String
  type       String
  payload    Json
  status     String    @default("pending")
  createdAt  DateTime  @default(now())
  processedAt DateTime?

  org        Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

  @@index([orgId])
  @@index([type])
  @@index([status])
}
